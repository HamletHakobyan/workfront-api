var gulp = require('gulp-help')(require('gulp'));

var BUILD_DIR = './dist/';
var COVERAGE_DIR = './coverage/';

gulp.task('default', false, ['help']);

/**
 * Empties BUILD_DIR and cleans coverage data
 */
gulp.task('clean', 'Empty '+BUILD_DIR+' folder and remove generated coverage data from '+COVERAGE_DIR, ['clean-coverage', 'clean-build']);

/**
 * Empties BUILD_DIR
 */
gulp.task('clean-build', false, [], function(cb) {
	var del = require('del');
	del([BUILD_DIR + '*'], cb);
});

/**
 * Cleans coverage data
 */
gulp.task('clean-coverage', false, [], function(cb) {
	var del = require('del');
	del([COVERAGE_DIR], cb);
});


/**
 * Generates browser-ready version for API in BUILD_DIR
 * File will be named as attask.js, minified version will be attask.min.js
 */
gulp.task('build', 'Generates browser-ready version for API in '+BUILD_DIR, ['clean-build'], function() {
	var browserify = require('browserify');
	var source = require('vinyl-source-stream');
	var buffer = require('vinyl-buffer');
	var uglify = require('gulp-uglify');
	var rename = require('gulp-rename');
	return browserify(
			'./index.js',
			{
				standalone: 'AtTask'
			}
		)
		.ignore('promise/polyfill')
		.bundle()
		.pipe(source('attask.js'))
		.pipe(buffer())
		.pipe(gulp.dest(BUILD_DIR))
		.pipe(rename({ extname: '.min.js' }))
		.pipe(uglify())
		.pipe(gulp.dest(BUILD_DIR));
});


var generateDocs = function(destinationPath) {
	var jsdoc = require("gulp-jsdoc");
	return gulp.src(["src/**/*.js", "README.md"])
		.pipe(
		jsdoc(destinationPath, {
			path: 'ink-docstrap',
			systemName: 'attask-api',
			//footer: "Something",
			//copyright: "Something",
			navType: "vertical",
			theme: "united",
			linenums: true,
			collapseSymbols: false,
			inverseNav: false
		})
	);
};

var publishDocs = function(cb) {
	var shell = require('shelljs'),
		path = require('path'),
		os = require('os'),
		dateformat = require('dateformat');

	if (!shell.which('git')) {
		cb('Sorry, git command was not found.');
		return;
	}

	var ghPagesDir = path.join(os.tmpdir(), 'gh-pages'),
		currentDir = process.cwd();
	shell.rm('-rf', ghPagesDir);
	shell.mkdir(ghPagesDir);
	shell.exec('git clone -b gh-pages https://github.com/bhovhannes/attask-api.git "'+ghPagesDir+'"');
	shell.rm('-rf', path.join(ghPagesDir, 'api-docs', '*'));

	var stream = generateDocs(path.join(ghPagesDir, 'api-docs'));
	stream.on('finish', function() {
		shell.cd(ghPagesDir);
		shell.exec('git add -A .');
		shell.exec('git commit -m "Autogenerated new docs at ' + dateformat(new Date()) + '"');
		shell.exec('git fetch origin && git rebase origin/gh-pages');
		shell.exec('git push origin gh-pages');

		shell.cd(currentDir);
		shell.rm('-rf', ghPagesDir);
		cb();
	});
	stream.on('error', function(e) {
		cb('Error ' + e.name + ': ' + e.message);
	});
};


/**
 * Generate API documentation in ./docs/ folder
 */
gulp.task('docs', 'Generate API documentation in ./docs/ folder', [], function() {
	return generateDocs('./docs/');
});


/**
 * Generate and publish API documentation to gh-pages branch
 */
gulp.task('publish-docs', 'Generate and publish API documentation to http://bhovhannes.github.io/attask-api/', [], function(cb) {
	publishDocs(cb);
});


/**
 * Starts supplied web server in a project directory. Binds to http://localhost:8000/
 */
gulp.task('serve', 'Start supplied web server in a project directory. Binds to http://localhost:8000/', [], function() {
	var webserver = require('gulp-webserver');
	gulp.src('./')
		.pipe(webserver({
			hostname: 'localhost',
			port: 8000,
			livereload: true,
			directoryListing: true,
			open: true
		}));
});


var runTests = function() {
	var mocha = require('gulp-mocha');
	return gulp.src('test/**/*.spec.js', {read: false})
		.pipe(mocha({}));
};

/**
 * Runs all tests
 */
gulp.task('test', 'Run all tests', [], runTests);

/**
 * Runs all tests with coverage
 */
gulp.task('test-coverage', 'Run all tests and generate coverage data in '+COVERAGE_DIR+' folder', ['clean-coverage'], function(cb) {
	var istanbul = require('gulp-istanbul');

	gulp.src(['src/**/*.js'])
		.pipe(istanbul()) // Covering files
		.pipe(istanbul.hookRequire()) // Force `require` to return covered files
		.on('finish', function () {
			runTests()
			.pipe(istanbul.writeReports()) // Creating the reports after tests runned
			.on('end', cb);
		});
});

/**
 * This intended to be run only on Travis CI.
 * Runs all tests with coverage, when upload coverage data to coveralls.io
 */
gulp.task('test-ci', false, ['test-coverage'], function() {
	var coveralls = require('gulp-coveralls');
	return gulp.src(COVERAGE_DIR + 'lcov.info')
		.pipe(coveralls());
});
